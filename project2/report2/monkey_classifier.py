# -*- coding: utf-8 -*-
"""Monkey Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5b5s2b2HlABgEa3JQ2nju_3Z1RenuWE

# Monkey Species Identifier

**Initialization**
"""

import numpy as np
import joblib

import matplotlib.pyplot as plt

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from keras.applications.xception import Xception
from google.colab import drive

from sklearn.metrics import precision_recall_fscore_support

# Mount google drive
drive.mount("drive")

"""**Load Dataset**"""

DATASET_PATH = "drive/My Drive/dataset/dataset_monkey.joblib"
X_train, Y_train = joblib.load(DATASET_PATH)

DATASET_PATH = "drive/My Drive/dataset/dataset_monkey_test.joblib"
X_test, Y_test = joblib.load(DATASET_PATH)

X_test.shape[0]

"""**Set variables**"""

HEIGHT = X_train.shape[1]
WIDTH = X_train.shape[2]
CHANNELS = X_train.shape[3]

TRAIN_SAMPLES = X_train.shape[0]
TEST_SAMPLES = X_test.shape[0]
BATCH_SIZE = 32
CLASSES = 10
EPOCH_STEPS = int(TRAIN_SAMPLES / BATCH_SIZE)
EPOCHS = 50

NN_OUTPUT_HEIGHT = 7
NN_OUTPUT_WIDTH = 7
NN_OUTPUT_CHANNELS = 2048

nn_model = Xception(
    weights="imagenet",
    input_shape=(HEIGHT, WIDTH, CHANNELS),
    include_top=False
)

"""**Extract Features for training dataset**"""

X_train_reduced = np.zeros((
    TRAIN_SAMPLES, NN_OUTPUT_HEIGHT, NN_OUTPUT_WIDTH, 
    NN_OUTPUT_CHANNELS), dtype=np.float32)

for i in range(TRAIN_SAMPLES):
    X_train_reduced[i, :, :, :] = nn_model.predict(
        X_train[i:i+1, :, :, :])

# Cleanup memory
del X_train

X_train = np.reshape(X_train_reduced, (TRAIN_SAMPLES, 7 * 7 * 2048))

"""**Extract features for test dataset**"""

X_test_reduced = np.zeros((
    TEST_SAMPLES, NN_OUTPUT_HEIGHT, NN_OUTPUT_WIDTH, 
    NN_OUTPUT_CHANNELS), dtype=np.float32)

for i in range(TEST_SAMPLES):
    X_test_reduced[i, :, :, :] = nn_model.predict(
        X_test[i:i+1, :, :, :])

# Cleanup memory
del X_test

X_test = np.reshape(X_test_reduced, (TEST_SAMPLES, 7 * 7 * 2048))

"""**Construct Neural Network model**"""

model = Sequential()
model.add(Dense(512, activation='relu', input_dim=7*7*2048))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['acc'])

"""**Train the model**"""

history = model.fit(
    X_train,
    Y_train,
    epochs=25,
    batch_size=BATCH_SIZE,
    shuffle=True,
    validation_split=0.1
)

# Predict values
Y_pred = model.predict(X_test)

Y_pred_labels = [x.argmax() for x in Y_pred]
Y_test_labels = [x.argmax() for x in Y_test]

print(precision_recall_fscore_support(Y_test_labels, Y_pred_labels))
